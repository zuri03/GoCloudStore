
refactor communication protocol
    - Use structs and gob encoding instead

Use mongodb? to add persistance to file meta data

Add users service:
    this service will be a rest api that provides persistant storage for user objects
    hash [username:password] and use resulting hash as id  
        this means that no two users can have the same username and password
    use struct to store user info
        id: hash(username:password)
        username: string
        password: hash(password)
        creationDate: date 

Set up kubernetes

set up go tests

Reduce docker image size

set up tls for each of the rest apis

come up with a better name for allowedUsers
    allowed users is a list of users that are allowed to retrieve a file despite not being the owner

Implement more coordination between client and storage sever
    messages back and forth in order to coordinate their actions and ensure their is no failure from the other side

Determine how allowed system works
    for now allowed users is simply a slice of usernames
    need to determine the best way to store users in this slice

determine best numerical values for constants

Implement system logging

fix makefile

Use Bufio for sending files in loop

setup timeouts with connections

Improve communication protocol
    - right now communication is handled by a series of signals that represent actions a client wishes to take
    - instead create an object representing a single message
    - this object will be gob encoded by the entity and decoded by the other

Future Plans:
    Make desktop app that uses the client to send data to server
    May combine the user and record keeper service